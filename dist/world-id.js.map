{"version":3,"file":"world-id.js","sources":["../src/utils/keccak-256.ts","../src/utils/hash-bytes.ts","../src/utils/random-number.ts","../src/utils/validate-abi-like-encoding.ts","../src/components/ReactWIdget.tsx","../src/index.ts","../src/utils/build-verification-request.ts","../src/utils/validate-input-params.ts","../src/utils/verify-verification-response.ts","../src/widget/init.tsx","../src/components/SayHello.tsx"],"sourcesContent":["import sha3 from \"js-sha3\";\nimport { arrayify, concat, hexlify } from \"@ethersproject/bytes\";\n\n/**\n * Partial implementation of `keccak256` hash from @ethersproject/solidity; only supports hashing a single BytesLike value\n * @param value value to hash\n * @returns\n */\nexport function keccak256(value: Buffer): string {\n  const tight: Array<Uint8Array> = [arrayify(value)];\n  const data = hexlify(concat(tight));\n  return \"0x\" + sha3.keccak_256(arrayify(data));\n}\n","import { keccak256 } from \"./keccak-256\";\n\n/**\n * Hashes an input using the `keccak256` hashing function used across the World ID protocol, to be used as\n * a ZKP input.\n * @param input - Input to hash (if it's a string, it'll be converted to bytes first)\n * @returns hash\n */\nexport function hashBytes(input: string | Buffer): {\n  hash: BigInt;\n  digest: string;\n} {\n  const bytesInput = Buffer.isBuffer(input) ? input : Buffer.from(input);\n  const hash = BigInt(keccak256(bytesInput)) >> BigInt(8);\n  const rawDigest = hash.toString(16);\n  return { hash, digest: `0x${rawDigest.padStart(64, \"0\")}` };\n}\n","/**\n * Generates a random integer between a specified range\n * @param min Minimum number in range (inclusive)\n * @param max Maximum number in range (inclusive)\n * @returns Number between range\n */\nexport const randomNumber = (min: number, max: number): number => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n","/**\n * Validates that an string looks like an ABI-encoded string. Very basic format-like check.\n * The WLD app validates the actual values.\n * @param value string to validate\n * @returns `true` if the value looks like an ABI-encoded string; `false` otherwise\n */\nexport const validateABILikeEncoding = (value: string): boolean => {\n  const ABI_REGEX = /^0x[\\dabcdef]+$/;\n  return !!value.toString().match(ABI_REGEX) && value.length >= 66; // Because `0` contains 66 characters\n};\n","export const ReactWidget = (): JSX.Element => {\n  return <div>I am React Widget</div>;\n};\n","import {\n  buildVerificationRequest,\n  hashBytes,\n  keccak256,\n  randomNumber,\n  validateABILikeEncoding,\n  validateInputParams,\n  verifyVerificationResponse,\n} from \"./utils\";\n\nimport { init } from \"./widget\";\n\nexport * from \"./components\";\n\nexport const utils = {\n  buildVerificationRequest,\n  hashBytes,\n  keccak256,\n  randomNumber,\n  validateABILikeEncoding,\n  validateInputParams,\n  verifyVerificationResponse,\n};\n\nexport default { init };\n","import {\n  AppProps,\n  VerificationRequest,\n  VerificationRequestParams,\n} from \"../types\";\nimport { hashBytes } from \"./hash-bytes\";\nimport { randomNumber } from \"./random-number\";\n\nexport const buildVerificationRequest = (\n  props: AppProps\n): VerificationRequest => {\n  if (!props.signal) {\n    throw new Error(\n      \"Unexpectedly trying to build verification request without a `signal`.\"\n    );\n  }\n\n  const params: VerificationRequestParams = {\n    signal: props.advanced_use_raw_signal\n      ? props.signal\n      : hashBytes(props.signal).digest,\n    action_id: props.advanced_use_raw_action_id\n      ? props.action_id\n      : hashBytes(props.action_id).digest,\n  };\n\n  if (props.app_name) {\n    params.app_name = props.app_name;\n  }\n\n  if (props.signal_description) {\n    params.signal_description = props.signal_description;\n  }\n\n  return {\n    id: randomNumber(100000, 9999999),\n    jsonrpc: \"2.0\",\n    method: \"wld_worldIDVerification\",\n    params: [params],\n  };\n};\n","import { AppProps } from \"../types\";\nimport { validateABILikeEncoding } from \"./validate-abi-like-encoding\";\n\n/**\n * Validates the input parameters passed to the package when initializing.\n * @param params `AppProps`\n * @returns `true` if parameters are valid; error is raised otherwise.\n */\nexport const validateInputParams = (\n  params: AppProps\n): { valid: boolean; error?: string } => {\n  if (!params.action_id) {\n    return {\n      valid: false,\n      error: \"The `action_id` parameter is always required.\",\n    };\n  }\n\n  if (\n    params.advanced_use_raw_action_id &&\n    !validateABILikeEncoding(params.action_id)\n  ) {\n    return {\n      valid: false,\n      error: `You enabled 'advanced_use_raw_action_id' which uses the action ID raw (without any additional hashing or encoding),\n        but the action ID you provided does not look to be validly hashed or encoded. Please check\n        https://id.worldcoin.org/docs/js/reference#parameters for details.`,\n    };\n  }\n\n  if (\n    params.advanced_use_raw_signal &&\n    params.signal &&\n    !validateABILikeEncoding(params.signal)\n  ) {\n    return {\n      valid: false,\n      error: `You enabled 'advanced_use_raw_signal' which uses the signal raw (without any additional hashing or encoding),\n        but the signal you provided does not look to be validly hashed or encoded. Please check\n        https://id.worldcoin.org/docs/js/reference#parameters for details.`,\n    };\n  }\n\n  return { valid: true };\n};\n","import { validateABILikeEncoding } from \"./validate-abi-like-encoding\";\n\n/**\n * Verifies that the response from the WLD app is valid\n * @param result expects a valid `VerificationResponse`\n */\nexport const verifyVerificationResponse = (\n  result: Record<string, string | undefined>\n): boolean => {\n  const merkle_root = \"merkle_root\" in result ? result.merkle_root : undefined;\n  const nullifier_hash =\n    \"nullifier_hash\" in result ? result.nullifier_hash : undefined;\n  const proof = \"proof\" in result ? result.proof : undefined;\n\n  for (const attr of [merkle_root, nullifier_hash, proof]) {\n    if (!attr || !validateABILikeEncoding(attr)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n","import { render } from \"react-dom\";\nimport { ReactWidget } from \"components\";\n\nexport const init = (elementInput: string | HTMLElement) => {\n  let mountNode: HTMLElement | null = null;\n\n  if (typeof elementInput !== \"string\") {\n    mountNode = elementInput;\n  }\n\n  if (typeof elementInput === \"string\") {\n    mountNode = document.getElementById(elementInput);\n  }\n\n  if (mountNode !== null) {\n    render(<ReactWidget />, mountNode);\n  }\n};\n","import { useEffect, useState } from \"react\";\n\nexport function SayHello(props: { name: string }): JSX.Element {\n  const [name, setName] = useState(props.name);\n\n  useEffect(() => {\n    setName(props.name);\n  }, [props]);\n\n  return <div>Hey {name}, say hello to TypeScript.</div>;\n}\n"],"names":["keccak256","value","tight","arrayify","data","hexlify","concat","sha3","keccak_256","hashBytes","input","bytesInput","Buffer","isBuffer","from","hash","BigInt","rawDigest","toString","digest","padStart","randomNumber","min","max","Math","floor","random","validateABILikeEncoding","match","length","ReactWidget","_jsx","utils","buildVerificationRequest","props","signal","Error","params","advanced_use_raw_signal","action_id","advanced_use_raw_action_id","app_name","signal_description","id","jsonrpc","method","validateInputParams","valid","error","verifyVerificationResponse","result","merkle_root","undefined","nullifier_hash","proof","attr","index","init","elementInput","mountNode","document","getElementById","render","name","setName","useState","useEffect","_jsxs","jsxs","children"],"mappings":"kIAQM,SAAUA,EAAUC,GACxB,MAAMC,EAA2B,CAACC,WAASF,IACrCG,EAAOC,EAAOA,QAACC,SAAOJ,IAC5B,MAAO,KAAOK,EAAAA,QAAKC,WAAWL,EAAAA,SAASC,ICHnC,SAAUK,EAAUC,GAIxB,MAAMC,EAAaC,OAAOC,SAASH,GAASA,EAAQE,OAAOE,KAAKJ,GAC1DK,EAAOC,OAAOhB,EAAUW,KAAgBK,OAAO,GAC/CC,EAAYF,EAAKG,SAAS,IAChC,MAAO,CAAEH,OAAMI,OAAQ,KAAKF,EAAUG,SAAS,GAAI,QCT9C,MAAMC,EAAe,CAACC,EAAaC,IACjCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GCDzCK,EAA2B1B,KAE7BA,EAAMiB,WAAWU,MADR,oBAC4B3B,EAAM4B,QAAU,GCRnD,MAAAC,EAAc,IAClBC,4CCaIC,EAAQ,CACnBC,yBCNAC,IAEA,IAAKA,EAAMC,OACT,MAAM,IAAIC,MACR,yEAIJ,MAAMC,EAAoC,CACxCF,OAAQD,EAAMI,wBACVJ,EAAMC,OACN1B,EAAUyB,EAAMC,QAAQhB,OAC5BoB,UAAWL,EAAMM,2BACbN,EAAMK,UACN9B,EAAUyB,EAAMK,WAAWpB,QAWjC,OARIe,EAAMO,WACRJ,EAAOI,SAAWP,EAAMO,UAGtBP,EAAMQ,qBACRL,EAAOK,mBAAqBR,EAAMQ,oBAG7B,CACLC,GAAItB,EAAa,IAAQ,SACzBuB,QAAS,MACTC,OAAQ,0BACRR,OAAQ,CAACA,KDtBX5B,YACAT,YACAqB,eACAM,0BACAmB,oBEXAT,GAEKA,EAAOE,UAQVF,EAAOG,6BACNb,EAAwBU,EAAOE,WAEzB,CACLQ,OAAO,EACPC,MAAO,uSAOTX,EAAOC,yBACPD,EAAOF,SACNR,EAAwBU,EAAOF,QAEzB,CACLY,OAAO,EACPC,MAAO,8RAMJ,CAAED,OAAO,GA/BP,CACLA,OAAO,EACPC,MAAO,iDFOXC,2BGdAC,IAEA,MAAMC,EAAc,gBAAiBD,EAASA,EAAOC,iBAAcC,EAC7DC,EACJ,mBAAoBH,EAASA,EAAOG,oBAAiBD,EACjDE,EAAQ,UAAWJ,EAASA,EAAOI,WAAQF,EAEjD,IAAK,MAAMG,IAAQ,CAACJ,EAAaE,EAAgBC,GAC/C,IAAKC,IAAS5B,EAAwB4B,GACpC,OAAO,EAIX,OAAO,IHIM,IAAAC,EAAA,CAAEC,KIrBIC,IACnB,IAAIC,EAAgC,KAER,iBAAjBD,IACTC,EAAYD,GAGc,iBAAjBA,IACTC,EAAYC,SAASC,eAAeH,IAGpB,OAAdC,GACFG,EAAAA,OAAO/B,EAAAA,IAACD,MAAgB6B,uCCbtB,SAAmBzB,GACvB,MAAO6B,EAAMC,GAAWC,EAAAA,SAAS/B,EAAM6B,MAMvC,OAJAG,EAAAA,WAAU,KACRF,EAAQ9B,EAAM6B,QACb,CAAC7B,IAEGiC,EAAAC,KAAA,MAAA,CAAAC,SAAA,CAAA,OAAUN,EAAI"}